docker-compose allows us to manage(start/stop/build) multiple containers easily.
docker-compose allows networking between a batch of containers.

We will redo the visits_project with docker-compose.
We will also be performing Error testing to learn container resiliance

Create docker-compose in project folder
    #vim docker-compose.yml
Define both containers with their service-name, image to be pulled or build, list of host-container port mapping and other properties
    ->services:
    ->  visits_backend:
    ->    image: 'redis'
    ->  visits_frontend:
    ->    build: ./
    ->    ports:
    ->      - "32323:8081"
Save and exit.

Just as <#docker build .> requires dockerfile,
All docker-compose commands reuires docker-compose.yml in pwd.
To run the config in docker-compose.yml
    #docker-compose up
    #docker-compose up -d
Open browser http://localhost:32323. Repeatedly reload the page.
If you make changes to index.js or any file in pwd,
    #docker-compose up -d --build
Check status of items defined yml. This wont work if you cd to different path
    #docker-compose ps
    #docker ps
    #docker network ls
    #cd ..
    #docker-compose ps
    #docker ps
 To stop and remove containers/services and networks created by yml file.
    #docker-compose down

To add resiliance to the services, define restart in docker-compose.yml.
This can also be used with docker run. Just add the --restart flag  
    ->services: visits_frontend: restart: always
Default restart policy is "no". You can change it to always, on-failure, or unless-stopped
Edit index.js. 
-Enable L3, ie const process = require('process');
-Enable L13,ie process.exit(0);
Rebuild
    #docker-compose up --build
Reload URL and check cli response.
Edit index.js.
-Modify L13,to process.exit(1);
Rebuild
    #docker-compose up --build
Reload URL and check cli response.
Repeat excercise with different restart policy in docker-compose.yml
    ->services: visits_frontend: restart: on-failure

Once your done, do a clean up
    #docker system prune -a --volumes